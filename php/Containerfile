ARG PHP_VERSION
ARG DEBIAN_VERSION
ARG PHP_RUNTIME
ARG START_RUNTIME=${PHP_RUNTIME}
FROM docker.io/library/php:${PHP_VERSION}-${PHP_RUNTIME}-${DEBIAN_VERSION} AS builder

WORKDIR /var/www/html/

ENV DEBIAN_FRONTEND=noninteractive
ENV LC_ALL=C.UTF-8
ENV TERM=xterm-color
ENV COMPOSER_ALLOW_SUPERUSER 1
ENV PATH /var/www/html/vendor/bin:/composer/vendor/bin:$PATH

RUN rm -f /etc/apt/apt.conf.d/docker-clean; echo 'Binary::apt::APT::Keep-Downloaded-Packages "true";' > /etc/apt/apt.conf.d/keep-cache
RUN pecl channel-update pecl.php.net

RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
	--mount=type=cache,target=/var/lib/apt,sharing=locked \
	set -eux; \
	apt-get update; \
	apt-get install --no-install-recommends -y apt-transport-https && \
	apt-get install -y --no-install-recommends \
	apt-utils \
	gnupg \
	gosu \
	git \
	curl \
	ca-certificates \
	supervisor \
	libmemcached-dev \
	libz-dev \
	libbrotli-dev \
	libc-ares-dev \
	libpq-dev \
	libjpeg-dev \
	libpng-dev \
	libfreetype6-dev \
	libssl-dev \
	libwebp-dev \
	libmcrypt-dev \
	libonig-dev \
	libzip-dev zip \
	unzip \
	libargon2-1 \
	libidn2-0 \
	libpcre2-8-0 \
	libpcre3 \
	libxml2 \
	libzstd1 \
	procps \
	libcurl4-openssl-dev \
	vim \
	nano \
	net-tools \
	libmagickwand-dev \
	libgmp-dev \
	libxslt1-dev \
	zlib1g-dev \
	libicu-dev \
	g++ \
	libffi-dev

RUN export MAKE="make -j$(nproc)" && \
	docker-php-source extract && \
	pecl install -o \
	igbinary \
	redis \
	grpc \
	protobuf \
	opentelemetry && \
	rm -rf /tmp/pear && \
	docker-php-ext-enable \
	igbinary \
	redis \
	grpc \
	protobuf \
	opentelemetry && \
	docker-php-ext-install -j$(nproc) \
	bz2 \
	calendar \
	curl \
	exif \
	gettext \
	gmp \
	iconv \
	pdo \
	pdo_pgsql \
	shmop \
	soap \
	sysvmsg \
	sysvsem \
	sysvshm \
	xml \
	xsl \
	pdo_mysql \
	mbstring \
	opcache \
	pcntl \
	bcmath \
	sockets && \
	set -xe; \
	docker-php-ext-configure zip && \
	docker-php-ext-install -j$(nproc) zip && \
	docker-php-ext-configure gd \
	--prefix=/usr \
	--with-jpeg \
	--with-webp \
	--with-freetype && \
	docker-php-ext-install -j$(nproc) gd && \
	docker-php-ext-install -j$(nproc) ffi && \
	pecl install -o \
	-D 'enable-openssl="yes" enable-http2="yes" enable-swoole-curl="yes" enable-cares="yes" enable-mysqlnd="yes" enable-swoole-pgsql="yes" enable-brotli="yes" enable-sockets="yes"' \
	swoole && \
	docker-php-ext-enable \
	swoole && \
	pecl install -o mongodb && \
	rm -rf /tmp/pear && \
	docker-php-ext-enable mongodb && \
	rm -rf /tmp/pear && \
	docker-php-ext-configure intl && \
	docker-php-ext-install -j$(nproc) intl && \
	set -eux; \
	docker-php-source delete; \
	rm -rf /usr/local/bin/phpdbg; \
	rm -rf /usr/local/lib/php/test && \
	find /usr/local/bin /usr/local/sbin /usr/local/lib -type f -perm /0111 -exec strip --strip-all '{}' + || true

RUN set -eux; \
	find /usr/local/lib/php /usr/local/bin /usr/local/sbin /usr/lib/x86_64-linux-gnu/ -type f -executable -exec ldd '{}' ';' \
	| awk '/=>/ { print $(NF-1) }' \
	| xargs -P $(nproc) -I {} dpkg-query --search {} | awk -F ":" '{print $1}' \
	| uniq >> /PACKAGES
RUN find /usr/lib/x86_64-linux-gnu/ -type f \
	| xargs -P $(nproc) -I {} dpkg-query --search {} | awk -F ":" '{print $1}' \
	| uniq >> /PACKAGES

RUN mkdir -p /etc/apache2 /usr/lib/apache2

FROM docker.io/library/debian:${DEBIAN_VERSION}-slim
ARG START_RUNTIME
ARG DEBIAN_VERSION

ENV DEBIAN_FRONTEND=noninteractive
ENV LC_ALL=C.UTF-8
ENV TERM=xterm-color
ENV COMPOSER_ALLOW_SUPERUSER 1
ENV PATH /var/www/html/vendor/bin:/composer/vendor/bin:$PATH
ENV PHP_INI_DIR /usr/local/etc/php
ENV START_RUNTIME ${START_RUNTIME}
ENV DOCUMENT_ROOT=/var/www/html

COPY --from=builder /usr/local/include/ /usr/local/include/
COPY --from=builder /usr/local/lib/php/ /usr/local/lib/php/
COPY --from=builder /usr/local/bin /usr/local/bin
COPY --from=builder /usr/local/sbin /usr/local/sbin
COPY --from=builder /usr/local/etc /usr/local/etc
COPY --from=builder /PACKAGES /
COPY opcache.ini /usr/local/etc/php/conf.d/zzz-opcache.ini
COPY error-logging.ini /usr/local/etc/php/conf.d/zzz-error-logging.ini
RUN mv /usr/local/etc/php/php.ini-production /usr/local/etc/php/php.ini && \
	rm -f /usr/local/etc/php/php.ini-development

RUN rm -f /etc/apt/apt.conf.d/docker-clean; echo 'Binary::apt::APT::Keep-Downloaded-Packages "true";' > /etc/apt/apt.conf.d/keep-cache

RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
	--mount=type=cache,target=/var/lib/apt,sharing=locked \
	apt-get update && \
	apt-get install --no-install-recommends \
	-y $(cat PACKAGES | sort | uniq) \
	ca-certificates \
	vim \
	tmux \
	net-tools \
	curl \
	git \
	gnupg2 \
	supervisor \
	unzip \
	procps

RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
	--mount=type=cache,target=/var/lib/apt,sharing=locked \
	if [ ${START_RUNTIME} = "apache" ]; then \
	apt-get update && \
	apt-get install --no-install-recommends -y apache2; \
	elif [ ${START_RUNTIME} = "nginx" ]; then \
	apt-get update && \
	apt-get install --no-install-recommends -y nginx; \
	fi

COPY --from=builder /usr/lib/apache2 /usr/lib/apache2
COPY --from=builder /etc/apache2 /etc/apache2

COPY --from=docker.io/library/composer:2 /usr/bin/composer /usr/local/bin/composer
RUN composer global require bamarni/symfony-console-autocomplete

RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
	--mount=type=cache,target=/var/lib/apt,sharing=locked \
	&& curl -sSfL https://www.postgresql.org/media/keys/ACCC4CF8.asc | gpg --dearmor > /etc/apt/trusted.gpg.d/pgdg.gpg \
	&& curl -sSfL https://dl.yarnpkg.com/debian/pubkey.gpg | gpg --dearmor > /etc/apt/trusted.gpg.d/yarn.gpg \
	&& echo "deb https://dl.yarnpkg.com/debian/ stable main" > /etc/apt/sources.list.d/yarn.list \
	&& echo "deb http://apt.postgresql.org/pub/repos/apt ${DEBIAN_VERSION}-pgdg main" > /etc/apt/sources.list.d/pgdg.list \
	&& curl -sL https://deb.nodesource.com/setup_22.x | bash - \
	&& apt-get update \
	&& apt-get install -y --no-install-recommends \
	postgresql-client \
	postgis \
	nodejs \
	yarn \
	&& npm install -g npm

WORKDIR /var/www/html/

RUN mkdir -p /opt/parmincloud/php && \
	rm -rf /var/www/html/*
COPY --chmod=0775 ./start.sh /opt/parmincloud/php/start-container
COPY nginx.conf /etc/nginx/nginx.conf
COPY nginx-supervisord.conf /opt/parmincloud/php/nginx-supervisord.conf
COPY index.php /var/www/html/index.php

EXPOSE 80
STOPSIGNAL SIGQUIT

CMD ["/opt/parmincloud/php/start-container"]
